// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve accounts
	// (GET /accounts)
	GetAccounts(c *gin.Context)
	// Create new account
	// (POST /accounts)
	CreateAccount(c *gin.Context)
	// Retrieve account
	// (GET /accounts/{accountId})
	GetAccount(c *gin.Context, accountId AccountId)
	// Initiate payment
	// (POST /payments)
	InitiatePayment(c *gin.Context)
	// Retrieve payment
	// (GET /payments/{paymentId})
	GetPayment(c *gin.Context, paymentId PaymentId)
	// Submit payment
	// (PATCH /payments/{paymentId}/submit)
	SubmitPayment(c *gin.Context, paymentId PaymentId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccounts(c)
}

// CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAccount(c)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accountId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccount(c, accountId)
}

// InitiatePayment operation middleware
func (siw *ServerInterfaceWrapper) InitiatePayment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InitiatePayment(c)
}

// GetPayment operation middleware
func (siw *ServerInterfaceWrapper) GetPayment(c *gin.Context) {

	var err error

	// ------------- Path parameter "paymentId" -------------
	var paymentId PaymentId

	err = runtime.BindStyledParameterWithOptions("simple", "paymentId", c.Param("paymentId"), &paymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter paymentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPayment(c, paymentId)
}

// SubmitPayment operation middleware
func (siw *ServerInterfaceWrapper) SubmitPayment(c *gin.Context) {

	var err error

	// ------------- Path parameter "paymentId" -------------
	var paymentId PaymentId

	err = runtime.BindStyledParameterWithOptions("simple", "paymentId", c.Param("paymentId"), &paymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter paymentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubmitPayment(c, paymentId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accounts", wrapper.GetAccounts)
	router.POST(options.BaseURL+"/accounts", wrapper.CreateAccount)
	router.GET(options.BaseURL+"/accounts/:accountId", wrapper.GetAccount)
	router.POST(options.BaseURL+"/payments", wrapper.InitiatePayment)
	router.GET(options.BaseURL+"/payments/:paymentId", wrapper.GetPayment)
	router.PATCH(options.BaseURL+"/payments/:paymentId/submit", wrapper.SubmitPayment)
}

type GetAccountsRequestObject struct {
}

type GetAccountsResponseObject interface {
	VisitGetAccountsResponse(w http.ResponseWriter) error
}

type GetAccounts200JSONResponse []Account

func (response GetAccounts200JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts400Response struct {
}

func (response GetAccounts400Response) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetAccounts500Response struct {
}

func (response GetAccounts500Response) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateAccountRequestObject struct {
	Body *CreateAccountJSONRequestBody
}

type CreateAccountResponseObject interface {
	VisitCreateAccountResponse(w http.ResponseWriter) error
}

type CreateAccount201JSONResponse Account

func (response CreateAccount201JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccount400Response struct {
}

func (response CreateAccount400Response) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateAccount500Response struct {
}

func (response CreateAccount500Response) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetAccountRequestObject struct {
	AccountId AccountId `json:"accountId"`
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse Account

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount400Response struct {
}

func (response GetAccount400Response) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetAccount404Response struct {
}

func (response GetAccount404Response) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAccount500Response struct {
}

func (response GetAccount500Response) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type InitiatePaymentRequestObject struct {
	Body *InitiatePaymentJSONRequestBody
}

type InitiatePaymentResponseObject interface {
	VisitInitiatePaymentResponse(w http.ResponseWriter) error
}

type InitiatePayment201JSONResponse Payment

func (response InitiatePayment201JSONResponse) VisitInitiatePaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type InitiatePayment400Response struct {
}

func (response InitiatePayment400Response) VisitInitiatePaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type InitiatePayment404Response struct {
}

func (response InitiatePayment404Response) VisitInitiatePaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type InitiatePayment500Response struct {
}

func (response InitiatePayment500Response) VisitInitiatePaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetPaymentRequestObject struct {
	PaymentId PaymentId `json:"paymentId"`
}

type GetPaymentResponseObject interface {
	VisitGetPaymentResponse(w http.ResponseWriter) error
}

type GetPayment200JSONResponse Payment

func (response GetPayment200JSONResponse) VisitGetPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPayment400Response struct {
}

func (response GetPayment400Response) VisitGetPaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPayment404Response struct {
}

func (response GetPayment404Response) VisitGetPaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPayment500Response struct {
}

func (response GetPayment500Response) VisitGetPaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SubmitPaymentRequestObject struct {
	PaymentId PaymentId `json:"paymentId"`
	Body      *SubmitPaymentJSONRequestBody
}

type SubmitPaymentResponseObject interface {
	VisitSubmitPaymentResponse(w http.ResponseWriter) error
}

type SubmitPayment202Response struct {
}

func (response SubmitPayment202Response) VisitSubmitPaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type SubmitPayment400Response struct {
}

func (response SubmitPayment400Response) VisitSubmitPaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubmitPayment404Response struct {
}

func (response SubmitPayment404Response) VisitSubmitPaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubmitPayment500Response struct {
}

func (response SubmitPayment500Response) VisitSubmitPaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve accounts
	// (GET /accounts)
	GetAccounts(ctx context.Context, request GetAccountsRequestObject) (GetAccountsResponseObject, error)
	// Create new account
	// (POST /accounts)
	CreateAccount(ctx context.Context, request CreateAccountRequestObject) (CreateAccountResponseObject, error)
	// Retrieve account
	// (GET /accounts/{accountId})
	GetAccount(ctx context.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)
	// Initiate payment
	// (POST /payments)
	InitiatePayment(ctx context.Context, request InitiatePaymentRequestObject) (InitiatePaymentResponseObject, error)
	// Retrieve payment
	// (GET /payments/{paymentId})
	GetPayment(ctx context.Context, request GetPaymentRequestObject) (GetPaymentResponseObject, error)
	// Submit payment
	// (PATCH /payments/{paymentId}/submit)
	SubmitPayment(ctx context.Context, request SubmitPaymentRequestObject) (SubmitPaymentResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAccounts operation middleware
func (sh *strictHandler) GetAccounts(ctx *gin.Context) {
	var request GetAccountsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccounts(ctx, request.(GetAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccountsResponseObject); ok {
		if err := validResponse.VisitGetAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAccount operation middleware
func (sh *strictHandler) CreateAccount(ctx *gin.Context) {
	var request CreateAccountRequestObject

	var body CreateAccountJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAccount(ctx, request.(CreateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAccountResponseObject); ok {
		if err := validResponse.VisitCreateAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx *gin.Context, accountId AccountId) {
	var request GetAccountRequestObject

	request.AccountId = accountId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx, request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		if err := validResponse.VisitGetAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// InitiatePayment operation middleware
func (sh *strictHandler) InitiatePayment(ctx *gin.Context) {
	var request InitiatePaymentRequestObject

	var body InitiatePaymentJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InitiatePayment(ctx, request.(InitiatePaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InitiatePayment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(InitiatePaymentResponseObject); ok {
		if err := validResponse.VisitInitiatePaymentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPayment operation middleware
func (sh *strictHandler) GetPayment(ctx *gin.Context, paymentId PaymentId) {
	var request GetPaymentRequestObject

	request.PaymentId = paymentId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPayment(ctx, request.(GetPaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPayment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaymentResponseObject); ok {
		if err := validResponse.VisitGetPaymentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubmitPayment operation middleware
func (sh *strictHandler) SubmitPayment(ctx *gin.Context, paymentId PaymentId) {
	var request SubmitPaymentRequestObject

	request.PaymentId = paymentId

	var body SubmitPaymentJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitPayment(ctx, request.(SubmitPaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitPayment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubmitPaymentResponseObject); ok {
		if err := validResponse.VisitSubmitPaymentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYUVPjNhD+Kxq1M3edceIkBxT8FshNh5cec8Dcww0Pir1OdLUkV5IBN+P/3pFsOTY2",
	"4EBKuSdMdrXa/fbbz5tscChYKjhwrXCwwSpcAyP2cR6GIuPaPKZSpCA1BWsIJRAN0dyafpUQ4wD/4m/j",
	"+FUQf0E0XFEGuPAwjZ7zru47j0p34JrGFKQ5FoEKJU01FRwHLjHU8PGwzlPAAVZaUr5qR7iypoGXtw4V",
	"HuaEweMpWGvP5Vka7Q7RHUkSMPU/c+ab8ysKD0v4O6MSIhx8NxhXCbcA7GDRuMprdLOZ9k1dlFj+gFCb",
	"/LYNCjY4FpIRjQOcZfbaNgQevh+txKj60PxR4+vr80XTMKIsFbLkF9FrHOAV1etsOQ4F80UcLxMR/qW2",
	"T6NQMCa4b6PZ2vub1mmW+RSJGOk1INLHHeAZs/gtCW9Uvm1n3aVO7PPLL6Pjo8kUacpAacJS7G2xMWiO",
	"jGUQQFel4x4BWkBIGUm6aVcGxDO2LCG4JyxNzHx/x9PJeGJg2JZRhRlSxKL23WMdFyRn0CdFhDmJenLI",
	"qpwK72XaFWZSAg/zLo5VYsh5oI+GEAez6e+/PQD18/XXXmpFoDTlpIy3g0A2zv3ZK1GLrUPN+sfkakU0",
	"3JH8284CNETXK4xK9xcJY6ai+W6N7hPGiiuNdjYjtzvRxbcL0i7SucXgnUinjfhOcmnSrs3hU3MiXBPK",
	"UfnGaug2+ji5R7GQ6LNeg4SMPZy4yT1ZTo/IydHi0+EJnM2OyHQKs7PZ8lN0HB+fHp8czKLD0ziMlj2D",
	"afKiPBYmJ011Ymxf4tgmpNAFydH84hx7+BakKnOdjCfjqem1SIGTlOIAfxpPxxPsWVysXPnVINp/VqC7",
	"FX8FLSncgnIzqz6gCDShicI2tLSUNGDhP0DPXTzDd5UKrkpdnE0mdlMTXFe6SdI0oaE97P9QpdiUY2Oe",
	"qAamBuqPqbFCi0hJ8hKsdhmXWRiCUnGWoDpnc+6gzOvBO5TfkoRGyEwsKBv/sN9Pg+QkQSClkJY6KmOM",
	"yLwBXI2bITNZWSbUKN0UHk6F6sH9zI6yQhzuXIQO3qXPvLZW+Z6KKN8J7PYr7CffdF+9tO62r3bFtSgD",
	"tsg/3akfgzj/HjheEvABR3tIXnhbpfE3xDW8GK46H9QA1bHKJgkDDdKk0KllYbZut3togZaAZHWTeddQ",
	"42TfGY58uM4VN0miZQbebg2zRLt5pSr+T8Q4mBw8MYdCo1hkPNqPTD5OoLRcWSxw/Zp5zqmmVjUr3w5X",
	"nMdFbd+PZu6+9r+7Df6BCvYtp83Ab617rmM/Gb0d4RqMdPS+cHxu09vfpG43H6KPlfNT6rgl+wB1dPEG",
	"qWOd6YvVsfFd7D9Vx7emj5vifanji+jjq2zJqPsmFK67l19ah8f1srS/gkBlBvoNCbQPOU9JDvIlPz68",
	"+oeB9s3NgMMEd9bX4/fL75Jfz7DbnAB560iXyQQHeK11qgLfJykdpyQf11/nx/f5P/7tFBs2VNE2jm51",
	"1MKrP6u3jOKm+DcAAP//Z5RpWn0YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
